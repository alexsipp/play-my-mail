extends layout

block content
        .row(style="background-color: #EEE; padding: 30px; margin-right: -60px;")
          .span12
            center
              <iframe style="padding-top: 50px" src="https://embed.spotify.com/?uri=#{playlist}" width="300" height="500" frameborder="0" allowtransparency="true"></iframe>

        .row
          .span6
            div#wordcloud.wordcloud
          .span6
            div#wordcloud_2.wordcloud
        
          script
            var temp_words = !{JSON.stringify(words)}
            var fill = d3.scale.category20();
            var w= 500;
            var h = 500;
            d3.layout.cloud().size([w,h])
            .words(temp_words.map(function(d) {
                
                var frequency = parseInt(d.frequency)
                console.log(frequency);
            return {text: d.word, size: frequency*8};
            }))
            .padding(5)
            .rotate(function() { return ~~(Math.random() * 2) * 90; })
            .font("Impact")
            .fontSize(function(d) { return d.size; })
            .on("end", draw)
            .start();
            function draw(words) {
            d3.select("#wordcloud").append("svg")
            .attr("width", w)
            .attr("height", h)
            .append("g")
            .attr("transform",  "translate(" + [w >> 1, h >> 1] + ")")
            .selectAll("text")
            .data(words)
            .enter().append("text")
            .style("font-size", function(d) { return d.size + "px"; })
            .style("font-family", "Impact")
            .style("fill", function(d, i) { return fill(i); })
            .attr("text-anchor", "middle")
            .attr("transform", function(d) {
            return "translate(" + [d.x, d.y] + ")rotate(" + d.rotate + ")";
            })
            .text(function(d) { return d.text; });
            }

          script
            var temp_artists = !{JSON.stringify(artist_list)}
            console.log(temp_artists)
            var fill = d3.scale.category20();
            var w= 500;
            var h = 500;
            d3.layout.cloud().size([w,h])
            .words(temp_artists.map(function(d) {
                
                var count = parseInt(d.count)
                console.log(count);
            return {text: d.name, size: count*8};
            }))
            .padding(5)
            .rotate(function() { return ~~(Math.random() * 2) * 90; })
            .font("Impact")
            .fontSize(function(d) { return d.size; })
            .on("end", draw)
            .start();
            function draw(words) {
            d3.select("#wordcloud_2").append("svg")
            .attr("width", w)
            .attr("height", h)
            .append("g")
            .attr("transform",  "translate(" + [w >> 1, h >> 1] + ")")
            .selectAll("text")
            .data(words)
            .enter().append("text")
            .style("font-size", function(d) { return d.size + "px"; })
            .style("font-family", "Impact")
            .style("fill", function(d, i) { return fill(i); })
            .attr("text-anchor", "middle")
            .attr("transform", function(d) {
            return "translate(" + [d.x, d.y] + ")rotate(" + d.rotate + ")";
            })
            .text(function(d) { return d.text; });
            }

        
        .row(style="padding: 30px; margin-right: -60px;")
          .span12
            center
              div#graph
        
          script
            
            var dg_nodes= !{JSON.stringify(graph_nodes)};
            var dg_links= !{JSON.stringify(graph_links)};
        
            var width = 1200,
                height = 1000;

            var color = d3.scale.category20();

            var force = d3.layout.force()
                .charge(-200)
                .linkDistance(100)
                .size([width, height]);

            var svg = d3.select("body").append("svg")
                .attr("width", width)
                .attr("height", height);

            var drawGraph = function(graph) {
              force
                  .nodes(dg_nodes)
                  .links(dg_links)
                  .start();

              var link = svg.selectAll(".link")
                  .data(dg_links)
                .enter().append("line")
                  .attr("class", "link")
                  .style("stroke", "black")
                  .style("stroke-width", function(d) { return 1; });

              var gnodes = svg.selectAll('g.gnode')
                 .data(dg_nodes)
                 .enter()
                 .append('g')
                 .classed('gnode', true);
                
              var node = gnodes.append("circle")
                  .attr("class", "node")
                  .attr("r", function(d){

                      console.log(d.group)

                      if (parseInt(d.group) == 1){
                       
                        return  (Math.sqrt(d.count)*10) ;
                      }

                      else {
                       
                        return 10;}

                    })
                  .style("fill", function(d) { return color(d.group); })
                  .call(force.drag);

              var labels = gnodes.append("text")
                  .text(function(d) { return d.name; });

              console.log(labels);
                
              force.on("tick", function() {
                link.attr("x1", function(d) { return d.source.x; })
                    .attr("y1", function(d) { return d.source.y; })
                    .attr("x2", function(d) { return d.target.x; })
                    .attr("y2", function(d) { return d.target.y; });

                gnodes.attr("transform", function(d) { 
                    return 'translate(' + [d.x, d.y] + ')'; 
                });
                  
                
                  
              });
            };

            drawGraph(graph);

        
        
            
